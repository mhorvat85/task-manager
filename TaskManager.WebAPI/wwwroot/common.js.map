{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/cache-services/task-priorities-cache.service.ts","./src/app/cache-services/task-statuses-cache.service.ts","./src/app/guards/can-activate.guard.ts","./src/app/services/task-priorities.service.ts","./src/app/services/task-statuses.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskPrioritiesCacheService {\r\n  private cache: Map<string, any> = new Map();\r\n\r\n  set(key: string, data: any): void {\r\n    this.cache.set(key, data);\r\n  }\r\n\r\n  get(key: string): any {\r\n    return this.cache.get(key);\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskStatusesCacheService {\r\n  private cache: Map<string, any> = new Map();\r\n\r\n  set(key: string, data: any): void {\r\n    this.cache.set(key, data);\r\n  }\r\n\r\n  get(key: string): any {\r\n    return this.cache.get(key);\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n}\r\n","import { inject } from '@angular/core';\r\nimport { CanActivateFn } from '@angular/router';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { LoginService } from '../services/login.service';\r\n\r\nexport const canActivateGuard: CanActivateFn = (route, state) => {\r\n  const token = sessionStorage.getItem('currentUser')\r\n    ? JSON.parse(sessionStorage.getItem('currentUser') as string).token\r\n    : null;\r\n\r\n  if (\r\n    inject(LoginService).isAuthenticated() &&\r\n    inject(JwtHelperService).decodeToken(token)['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] ==\r\n      route.data['role']\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, tap } from 'rxjs';\r\nimport { TaskPriority } from '../models/task-priority';\r\nimport { TaskPrioritiesCacheService } from '../cache-services/task-priorities-cache.service';\r\n\r\nconst API_BASE_URL = 'https://localhost:7036';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskPrioritiesService {\r\n  constructor(private httpClient: HttpClient, private cacheService: TaskPrioritiesCacheService) {}\r\n\r\n  getTaskPriorities(): Observable<TaskPriority[]> {\r\n    const cachedData = this.cacheService.get('cachedData');\r\n    if (cachedData) {\r\n      return of(cachedData);\r\n    } else {\r\n      return this.httpClient.get<TaskPriority[]>(`${API_BASE_URL}/api/taskpriorities`, { responseType: 'json' }).pipe(\r\n        tap((data) => {\r\n          this.cacheService.set('cachedData', data);\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  getTaskPrioritytByTaskPriorityID(taskPriorityID: number): Observable<TaskPriority> {\r\n    return this.httpClient.get<TaskPriority>(\r\n      `${API_BASE_URL}/api/taskpriorities/searchbytaskpriorityid/${taskPriorityID}`,\r\n      { responseType: 'json' }\r\n    );\r\n  }\r\n\r\n  insertTaskPriority(newTaskPriority: TaskPriority): Observable<TaskPriority> {\r\n    return this.httpClient.post<TaskPriority>(`${API_BASE_URL}/api/taskpriorities`, newTaskPriority, {\r\n      responseType: 'json',\r\n    });\r\n  }\r\n\r\n  updateTaskPriority(existingTaskPriority: TaskPriority): Observable<TaskPriority> {\r\n    return this.httpClient.put<TaskPriority>(`${API_BASE_URL}/api/taskpriorities`, existingTaskPriority, {\r\n      responseType: 'json',\r\n    });\r\n  }\r\n\r\n  deleteTaskPriority(taskPriorityID: number): Observable<string> {\r\n    return this.httpClient.delete<string>(`${API_BASE_URL}/api/taskpriorities?TaskPriorityID=${taskPriorityID}`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, tap } from 'rxjs';\r\nimport { TaskStatus } from '../models/task-status';\r\nimport { TaskStatusesCacheService } from '../cache-services/task-statuses-cache.service';\r\n\r\nconst API_BASE_URL = 'https://localhost:7036';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskStatusesService {\r\n  constructor(private httpClient: HttpClient, private cacheService: TaskStatusesCacheService) {}\r\n\r\n  getTaskStatuses(): Observable<TaskStatus[]> {\r\n    const cachedData = this.cacheService.get('cachedData');\r\n    if (cachedData) {\r\n      return of(cachedData);\r\n    } else {\r\n      return this.httpClient.get<TaskStatus[]>(`${API_BASE_URL}/api/taskstatuses`, { responseType: 'json' }).pipe(\r\n        tap((data) => {\r\n          this.cacheService.set('cachedData', data);\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  getTaskStatusByTaskStatusID(taskStatusID: number): Observable<TaskStatus> {\r\n    return this.httpClient.get<TaskStatus>(`${API_BASE_URL}/api/taskstatuses/searchbytaskstatusid/${taskStatusID}`, {\r\n      responseType: 'json',\r\n    });\r\n  }\r\n\r\n  insertTaskStatus(newTaskStatus: TaskStatus): Observable<TaskStatus> {\r\n    return this.httpClient.post<TaskStatus>(`${API_BASE_URL}/api/taskstatuses`, newTaskStatus, {\r\n      responseType: 'json',\r\n    });\r\n  }\r\n\r\n  updateTaskStatus(existingTaskStatus: TaskStatus): Observable<TaskStatus> {\r\n    return this.httpClient.put<TaskStatus>(`${API_BASE_URL}/api/taskstatuses`, existingTaskStatus, {\r\n      responseType: 'json',\r\n    });\r\n  }\r\n\r\n  deleteTaskStatus(taskStatusID: number): Observable<string> {\r\n    return this.httpClient.delete<string>(`${API_BASE_URL}/api/taskstatuses?TaskStatusID=${taskStatusID}`);\r\n  }\r\n}\r\n"],"names":["TaskPrioritiesCacheService","constructor","cache","Map","set","key","data","get","clear","factory","Éµfac","providedIn","TaskStatusesCacheService","inject","JwtHelperService","LoginService","canActivateGuard","route","state","token","sessionStorage","getItem","JSON","parse","isAuthenticated","decodeToken","of","tap","API_BASE_URL","TaskPrioritiesService","httpClient","cacheService","getTaskPriorities","cachedData","responseType","pipe","getTaskPrioritytByTaskPriorityID","taskPriorityID","insertTaskPriority","newTaskPriority","post","updateTaskPriority","existingTaskPriority","put","deleteTaskPriority","delete","i0","ÉµÉµinject","i1","HttpClient","i2","TaskStatusesService","getTaskStatuses","getTaskStatusByTaskStatusID","taskStatusID","insertTaskStatus","newTaskStatus","updateTaskStatus","existingTaskStatus","deleteTaskStatus"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}